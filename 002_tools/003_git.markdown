### About

Git is a source code management tool or SCM for short. An SCM helps you manage your code by saving changes as versions in a repository. Each version of any or all files can be retrieved by reverting back to the required version of the file. At the most basic an SCM allows you the freedom to experiment and actively break the code you're working because the most recent working version can be reverted to with a single command. There are other source code management tools, like [hg][hg], [bazaar][bzr] or [subversion][svn], but I'm writing about git because I think it is the best.

### Features

As a SCM git is clean and minimal, working out of a single .git directory in the root of the project. If want to remove the project from version control, delete the .git directory and all git files are gone. Git managed repositories are small using the minimum amount of space to store the differences between versions. Git is fast storing the latest version of your code, on even a large repository, is almost instantaneous. Git repositories for your code are very simple to create, and don't require an external server to start storing versions. When you do use an external git server pushing and pulling to the server is very fast. More advanced version of git allow you to create branches within your code repository. Branching means copying the code as a duplicate branch of the main "master" branch. The duplicate branch can be modified, committed to and then compared to the original master branch. If you are happy with the changes in the new branch you can merge the changes back into the master branch. Another option is to leave the alternate branch as it is for a later date and instead switch back to the master branch where the previous state before branching is still preserved. In this way create a branch is a simple and lightweight way to develop or experiment with new feature in your code.

### Collaboration

Git is useful for collaborating on shared source code repositories. The collaborative development of the Linux kernel is the reason git was created by Linus Torvalds. A key feature of git is that it is distributed. You are not bound by working from a single source server. I will have my copy of the repository and you will have yours. I like the changes you are making in your repository so I clone your repository as a branch into my own. I can test out the changes you've made before merging your changes into my master branch. If I only want a subset of the changes you've made I can use the git cherry-pick command to merge only the changes I want into my master branch. The website github.com enables the collaborative aspect of developing software with git. Github acts as a git server but also highlights the social links of branches between developers. Other developers' git repositories can be downloaded viewed and downloaded, but also forked into your own git profile. This fork acts as a copy of the original repository with the relationship between the two repositories maintained. Github monitors the commits, merges and branching between repositories which can be viewed, compared, or visualised as a network.

Getting started with git here are the resources I found useful.

[hg]: INSERT hg LINK
[bzr]: INSERT BAZAAR LINK
[svn]: INSERT SUBVERSION LINK
